import socket
import concurrent.futures

def scan_port(ip, port):
    try:
        # Attempt to create a socket and connect to the port
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)  # Timeout for the socket operation
            connection = s.connect_ex((ip, port))  # Returns 0 if connection is successful
            if connection == 0:
                print(f"Port {port} is open")
            else:
                print(f"Port {port} is closed")
    except socket.error as err:
        print(f"Couldn't connect to server: {err}")

def main(target_ip, start_port, end_port):
    # Using ThreadPoolExecutor to scan ports concurrently for faster completion
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        # Launching port scans in parallel
        future_to_port = {executor.submit(scan_port, target_ip, port): port for port in range(start_port, end_port + 1)}
        for future in concurrent.futures.as_completed(future_to_port):
            port = future_to_port[future]
            try:
                future.result()
            except Exception as exc:
                print(f"Port {port} generated an exception: {exc}")

if __name__ == "__main__":
    target = input("Enter the target IP or hostname: ")
    start_port = int(input("Enter the start port number: "))
    end_port = int(input("Enter the end port number: "))
    main(target, start_port, end_port)
